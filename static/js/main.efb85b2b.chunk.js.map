{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","components/Background.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","Background","useEffect","colors","balls","i","ball","document","createElement","classList","add","style","background","floor","length","left","top","transform","width","height","push","body","append","forEach","ra","to","x","y","animate","duration","direction","fill","iterations","Infinity","easing","App","useState","status","setFilteredTodos","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efb85b2b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(inputText === \"\") return;\r\n\r\n    setTodos([\r\n      ...todos, \r\n      { text: inputText, completed: false, id: Math.random() * 1000 },\r\n    ]);\r\n    \r\n    setInputText(\"\");\r\n  };\r\n\r\n  const statusHandler = (e) =>\r\n  {\r\n    setStatus(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Todo = ({text, todo ,todos, setTodos}) =>\r\n{\r\n    const deleteHandler = () =>\r\n    {\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    }\r\n\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(item => {\r\n            if(item.id === todo.id){\r\n                return{\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    };\r\n\r\n    return (\r\n      <div className=\"todo\">\r\n          <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>\r\n          <button onClick={completeHandler} className=\"complete-btn\">\r\n              <i className=\"fas fa-check\"></i>\r\n          </button>\r\n          <button onClick={deleteHandler} className=\"trash-btn\">\r\n              <i className=\"fas fa-trash\"></i>\r\n          </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Todo;","import React from 'react';\r\n\r\n//Importing Components\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => \r\n{\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map(todo => (\r\n          <Todo setTodos={setTodos} todos={todos} todo={todo} key={todo.id} text={todo.text} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;","import React, { useEffect } from 'react';\r\n\r\nconst Background = () => \r\n{\r\n    useEffect(() =>\r\n{\r\n    // Some random colors\r\n    const colors = [\"#ff0000\", \"#ff00ff\", \"#1adb61\", \"#000\", \"#eeff00\"];\r\n\r\n    const numBalls = 50;\r\n    const balls = [];\r\n\r\n    for (let i = 0; i < numBalls; i++) {\r\n    let ball = document.createElement(\"div\");\r\n    ball.classList.add(\"ball\");\r\n    ball.style.background = colors[Math.floor(Math.random() * colors.length)];\r\n    ball.style.left = `${Math.floor(Math.random() * 100)}vw`;\r\n    ball.style.top = `${Math.floor(Math.random() * 100)}vh`;\r\n    ball.style.transform = `scale(${Math.random()})`;\r\n    ball.style.width = `${Math.random()}em`;\r\n    ball.style.height = ball.style.width;\r\n    \r\n    balls.push(ball);\r\n    document.body.append(ball);\r\n    }\r\n\r\n    // Keyframes\r\n    balls.forEach((el, i, ra) => {\r\n    let to = {\r\n        x: Math.random() * (i % 2 === 0 ? -11 : 11),\r\n        y: Math.random() * 12\r\n    };\r\n\r\n    let anim = el.animate(\r\n        [\r\n        { transform: \"translate(0, 0)\" },\r\n        { transform: `translate(${to.x}rem, ${to.y}rem)` }\r\n        ],\r\n        {\r\n        duration: (Math.random() + 1) * 2000, // random duration\r\n        direction: \"alternate\",\r\n        fill: \"both\",\r\n        iterations: Infinity,\r\n        easing: \"ease-in-out\"\r\n        }\r\n    );\r\n    });\r\n}, []);\r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Background;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n//Importing Components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport Background from \"./components/Background\";\n\nfunction App() {\n\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos]= useState([]);\n\n  useEffect(() =>\n  {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() =>\n  {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n  const filterHandler = () =>\n  {\n    switch(status)\n    {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  //Save to local storage\n  const saveLocalTodos = () =>\n  {\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () =>\n  {\n    if (localStorage.getItem(\"todos\") === null)\n    {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }\n    else\n    {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>&#128221; Todo List! &#128221;</h1>\n      </header>\n      <Form todos={todos} setTodos={setTodos} inputText={inputText} setInputText={setInputText} setStatus={setStatus} />\n      <TodoList setTodos={setTodos} todos={todos} filteredTodos={filteredTodos} />  \n      <Background />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}